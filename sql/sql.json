{
"create_tree":"CREATE TABLE IF NOT EXISTS tree (id BIGINT PRIMARY KEY AUTO_INCREMENT, parent_id BIGINT, name BIGINT NOT NULL, inode BIGINT NOT NULL, UNIQUE (parent_id, name))",
"create_strings": "CREATE TABLE IF NOT EXISTS strings (id BIGINT PRIMARY KEY AUTO_INCREMENT, string TEXT NOT NULL)",
"create_inodes":"CREATE TABLE IF NOT EXISTS inodes ( inode bigint UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT, nlinks smallint unsigned NOT NULL, mode smallint unsigned NOT NULL, uid smallint unsigned NOT NULL, gid smallint unsigned NOT NULL, rdev int unsigned NOT NULL, size int unsigned NOT NULL, atime int NOT NULL, mtime int NOT NULL, ctime int NOT NULL)",
"create_links":"CREATE TABLE IF NOT EXISTS links (inode BIGINT NOT NULL UNIQUE, target TEXT NOT NULL)",
"create_hashes":"CREATE TABLE IF NOT EXISTS hashes (id BIGINT PRIMARY KEY AUTO_INCREMENT, hash CHAR(255) UNIQUE)",
"create_indices":"CREATE TABLE IF NOT EXISTS indices (inode BIGINT, hash_id BIGINT, block_nr INTEGER, PRIMARY KEY (inode, hash_id, block_nr))",
"create_options": "CREATE TABLE IF NOT EXISTS options (name VARCHAR(255) PRIMARY KEY, value TEXT NOT NULL)",


"insert_tree_item" : "INSERT INTO tree (parent_id, name, inode) VALUES (%(parent_id)s, %(string_id)s, %(inode_id)s)",
"insert_inode" : "INSERT INTO inodes (nlinks, mode, uid, gid, rdev, size, atime, mtime, ctime) VALUES (%(nlinks)s, %(mode)s, %(uid)s, %(gid)s, %(rdev)s, %(size)s, %(time)s, %(time)s, %(time)s)",
"insert_hash": "INSERT INTO hashes (hash) VALUES (%(hash)s)",
"insert_link" : "INSERT INTO links (inode, target) VALUES (%(inode)s, %(target)s)",
"insert_index": "INSERT INTO indices (inode, hash_id, block_nr) VALUES (%(inode)s, %(hash_id)s, %(block_nr)s)",
"insert_string": "INSERT INTO strings (string) VALUES (%(string)s)",


"query_nodes_names": "SELECT t.inode, s.string FROM tree t, strings s WHERE t.parent_id = %(node_id)s AND t.name = s.id",
"query_options": "SELECT name, value FROM options",
"query_hash_id": "SELECT id FROM hashes WHERE hash = %(hash)s", 
"query_string_id": "SELECT id FROM strings WHERE string = %(string)s",
"query_link_target": "SELECT target FROM links WHERE inode = %(inode)s",
"query_inode_mode_uid_gid": "SELECT mode, uid, gid FROM inodes WHERE inode = %(inode)s",
"query_inode_children_count": "SELECT COUNT(t.id) FROM tree t, inodes i WHERE t.parent_id = %(parent_id)s AND i.inode = t.inode AND i.nlinks > 0",
"query_hashes_unused": "SELECT hash FROM hashes WHERE id NOT IN (SELECT hash_id FROM indices)",
"query_hashes_by_inode": "SELECT h.hash FROM hashes h, indices i WHERE i.inode = %(inode)s AND h.id=i.hash_id  ORDER BY i.block_nr ASC",
"query_used_space":"SELECT SUM(inodes.size) FROM tree, inodes WHERE tree.inode = inodes.inode",
"query_inode_attr": "SELECT inode, nlinks, mode, uid, gid, rdev, size, atime, mtime, ctime FROM inodes WHERE inode = %(inode)s",
"query_inode_by_parent_and_name": "SELECT t.id, t.inode FROM tree t, strings s WHERE t.parent_id = %(parent_id)s AND t.name = s.id AND s.string = %(name)s LIMIT 1",
"query_top_blocks": "SELECT * FROM ( SELECT *, COUNT(*) AS 'count' FROM indices GROUP BY hash_id ORDER BY 'count' DESC ), hashes WHERE 'count' > 1 AND hash_id = hashes.id LIMIT 10",

"update_inode_mode": "UPDATE inodes SET mode = %(mode)s WHERE inode = %(inode)s",
"update_inode_uid_gid": "UPDATE inodes SET uid = %(uid)s, gid = %(gid)s WHERE inode = %(inode)s",
"dec_inode_nlinks": "UPDATE inodes SET nlinks = nlinks - 1 WHERE inode = %(inode)s",
"inc_inode_nlinks": "UPDATE inodes SET nlinks = nlinks + 1 WHERE inode = %(inode)s",
"update_inode_time": "UPDATE inodes SET atime = %(atime)s, mtime = %(mtime)s WHERE inode = %(inode)s",
"update_inode_size": "UPDATE inodes SET size = %(size)s, mtime=%(mtime)s WHERE inode = %(inode)s",


"delete_indices_by_node_and_block_nr": "DELETE FROM indices WHERE inode=%(inode)s and block_nr > %(block_nr)s",
"delete_strings":"DELETE FROM strings WHERE id NOT IN (SELECT name FROM tree)",
"delete_inodes":"DELETE FROM inodes WHERE nlinks = 0",
"delete_indices":"DELETE FROM indices WHERE inode NOT IN (SELECT inode FROM inodes)",
"delete_hashes" :"DELETE FROM hashes WHERE id NOT IN (SELECT hash_id FROM indices)",
"delete_tree_item": "DELETE FROM tree WHERE id = %(id)s"




}
